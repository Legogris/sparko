package main

import (
	"encoding/hex"
	"errors"
	"time"

	"github.com/fiatjaf/go-lnurl"
	"github.com/fiatjaf/lightningd-gjson-rpc/plugin"
)

var InvoiceWithDescriptionHashMethod = plugin.RPCMethod{
	"invoicewithdescriptionhash",
	"msatoshi label description_hash [expiry] [preimage]",
	"Create an invoice for {msatoshi} with {label} and {description_hash} with optional {expiry} seconds (default 1 week) and optional {preimage} (default autogenerated)",
	"",
	func(p *plugin.Plugin, params plugin.Params) (resp interface{}, errCode int, err error) {
		msatoshi, err := params.Int("msatoshi")
		if err != nil {
			return nil, 400, errors.New("invalid msatoshi value")
		}

		expiry, err := params.Int("expiry")
		if err != nil {
			expiry = 60 * 60 * 24 * 7
		}
		dexpiry := time.Second * time.Duration(expiry)

		preimage, err := params.String("preimage")
		if err != nil {
			preimage = lnurl.RandomK1()
		}
		bpreimage, _ := hex.DecodeString(preimage)

		descriptionHash, _ := hex.DecodeString(
			params.Get("description_hash").String())

		if len(descriptionHash) != 32 {
			return nil, 477,
				errors.New("description_hash is invalid or not given")
		}

		newinv, err := p.Client.InvoiceWithDescriptionHash(
			params.Get("label").String(),
			int64(msatoshi),
			descriptionHash,
			&bpreimage,
			&dexpiry,
		)
		if err != nil {
			return nil, 500, errors.New("error making invoice on lightningd: " + err.Error())
		}

		return map[string]interface{}{
			"bolt11":           newinv,
			"description_hash": hex.EncodeToString(descriptionHash),
			"preimage":         preimage,
			"expires_at":       time.Now().Add(dexpiry).Unix(),
		}, 0, nil
	},
}
